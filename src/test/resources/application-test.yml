# -- BEGIN TABLE SCHEMA
# CREATE TABLE person (
#	id INT PRIMARY KEY,
#	`name` VARCHAR(100) NOT NULL,
#   birth_place_id INT NOT NULL,
#	create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
#	update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()
# );
#
# CREATE TABLE person_info(
#	person_id INT NOT NULL PRIMARY KEY,
#	age INT NOT NULL,
#	create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
#	update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP()
# );
#
# CREATE TABLE person_job(
#	person_id INT NOT NULL PRIMARY KEY,
#	employer VARCHAR(255),
#	job_title VARCHAR(100),
#	salary DECIMAL(10,2)
# );
#
# CREATE TABLE `event` (
#	id INT PRIMARY KEY,
#	person_id INT NOT NULL,
#	event_name VARCHAR(128) NOT NULL,
#	create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
#	update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP() ON UPDATE CURRENT_TIMESTAMP(),
#	KEY (person_id)
# );
#
# CREATE TABLE relative(
#	id INT PRIMARY KEY,
#	person_id_1 INT NOT NULL,
#	person_id_2 INT NOT NULL,
#	relation VARCHAR(32) NOT NULL
#	KEY (person_id_1),
#	KEY (person_id_2)
# );
# CREATE TABLE birth_place(
#   id INT PRIMARY KEY,
#   name VARCHAR(100) NOT NULL
# );
#
# -- END TABLE SCHEMA

spring:
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:content;BUILTIN_ALIAS_OVERRIDE=1;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL;
  elasticsearch:
    rest:
      uris:
        - 127.0.0.1:9200

canal:
  # [DIRECT_CLIENT:KAFKA_CLIENT]，以下direct-client或者kafka-client二选一配置即可
  client-type: DIRECT_CLIENT
  direct-client:
    host: 192.168.133.63
    username:
    password:
    subscribe: elasticsearch_test\..*
    destination: elasticsearch_test
    batchSize: 100
  kafka-client:
    servers: 127.0.0.1:9092
    topic: elasticsearch_test
    partition: 0
    groupId: es-adapter
    batchSize: 1000

sync-config:
  mappings:
    - table: person # 表名
      es-index: person # es索引名
      id: id # 表id列
      simple-properties:
        # 简单字段列表，格式columnName[:[string|int|long|float|double|decimal|boolean|date]]
        - id
        - name
        - create_time
        - update_time
      constructed-properties: # 由sql构建的字段
        - name: sex,age,test_json # es index field
          # [FLAT_SIMPLE_PROPERTY|FLAT_LIST|NESTED_OBJECT|NESTED_OBJECT_LIST]，决定构建字段是简单普通字段、简单列表字段，嵌套对象还是嵌套对象列表
          join-type: FLAT_SIMPLE_PROPERTY
          # 主表数据变更时，是否触发关联字段重新构建。多数情况一般是先有主表记录，再插入关联表，所以默认为false
          construct-on-main-table-change: true
          # 构建sql, 动态参数以":column"格式，column必须在simple-properties中。Nullable
          sql: >
            select gender as sex,age, test_json
            from person_info
            where person_id=:id
          reconstruction-condition: # 重新构建字段条件
            table: person_info # 发生数据变更的表
            # 哪些列发生变更时触发，逗号分隔，空或者"*"代表任意列
            on-columns-updated: person_id, age, gender, test_json
            # 更新数据源[ROW_DATA:RETRIEVE_SQL]
            # ROW_DATA为直接从binlog的行数据里取列值，由data-columns定义取哪些列值
            # RETRIEVE_SQL则触发一次sql查询，由retrieve-sql定义取值方式
            datasource-type: ROW_DATA
            data-columns:
              - age
              - gender:string:sex
              - test_json
            # 重新构建sql，动态参数以":column"格式, {column}必须是在{table}中的列名
            retrieve-sql: >
              select gender as sex,age, test_json
              from person_info
              where person_id=:person_id
            # 表person_info的哪一列映射到es index ID
            index-id: person_id

        # ================================
        # =========== 新构建属性 ===========
        # ================================
        - name: children
          join-type: FLAT_LIST
          construct-on-main-table-change: true
          sql: >
            select person_id_2
            from relative
            where person_id_1=:id and relation='CHILD'
          reconstruction-condition:
            table: relative
            on-columns-updated: person_id_1, person_id_2, relation
            datasource-type: RETRIEVE_SQL
            retrieve-sql: >
              select person_id_2
              from relative
              where person_id_1=:person_id_1 and relation='CHILD'
            index-id: person_id_1

        # ================================
        # =========== 新构建属性 ===========
        # ================================
        - name: events
          join-type: NESTED_OBJECT_LIST
          construct-on-main-table-change: true
          sql: >
            select id, event_name, create_time, update_time, test_json as "test_json:json"
            from `event`
            where person_id=:id
          reconstruction-condition:
            table: event
            datasource-type: RETRIEVE_SQL
            retrieve-sql: >
              select id, event_name, create_time, update_time, test_json as "test_json:json"
              from `event`
              where person_id=:person_id
            index-id: person_id

        # ================================
        # =========== 新构建属性 ===========
        # ================================
        - name: job
          join_type: NESTED_OBJECT
          construct-on-main-table-change: false
          sql: >
            select employer, job_title, salary
            from person_job
            where person_id=:id
          reconstruction-condition:
            table: person_job
            datasource-type: ROW_DATA
            data-columns:
              - employer
              - job_title
              - salary
            retrieve-sql: >
              select employer, job_title, salary
              from person_job
              where person_id=:person_id
            index-id: person_id
        - name: birth_place
          join_type: NESTED_OBJECT
          construct-on-main-table-change: true
          sql: >
            select id, name
            from birth_place
            where id=:birth_place_id
      multiple-documents-update-events:
        - on-table: birth_place
          on-columns:
            - id
            - name
          retrieve-index-id-and-foreign-key-sql: >
            select id, birth_place_id
            from person p
            where birth_place_id=:id
          update-properties:
            - birth_place